分支界限法（0-1背包问题）
写一个程序用分支界限算法对背包问题求解。
算法思想：

输入：n(物品数量),w[i](各物品的重量)，p[i](各物品的价值)
C(背包的承受重量)
输出：最大价值

1、计算出物品的价值总量比。(p[i]/w[i])
2、根据价值重量比由高到低排序。
3、创建一颗二叉树（广度优先遍历），并初始化优先队列T.
4、计算最大价值上界（当背包没有放入任何物品时，得到最大价值上界）
计算公式为：ub=p[i]+(c-w)*(p[i+1]/w[i+1])
5、初始化队列后，创建第一个状态节点，把第一个节点放入队列中。
6、如果队列中不是空的（while is not null）,取出队首元素head，考虑是否放入物品i+1。如果放入则w=w+w[i],v=v+p[i],ub=p[i]+(c-w)*(p[i+1]/w[i+1]),
并将新的状态节点加入队列中。如果不将物品i+1放入背包w,v不变，ub=p[i]+(c-w)*(p[i+1]/w[i+1])。之后继续向下进行构造状态节点。如果i+1==n,构造的节点已经是一个解的最后一个节点。


例：（课本336页）背包的承重量W=10
物品	重量	价值/美元	价值/重量
1	4	40	          10
2	7	42	           6
3	5	25	           5
4	3	12	           4
 
从第一个节点开始，左节点代表包含物品i，右节点代表不包含物品i。当不超过背包的最大承重量与最大价值上界时；左节点可以将物品i+1放入背包。（不可以超过背包的承重量）
最大价值上界：ub=v+(W-w）*(vi+1 /wi+1) 
初始节点：w=0,v=0,ub=100(最大承重量*n个物品中最大价值重量比)
（左节点）包含物品1：w=4,v=40,ub=40+(10-4)*6=76
（右节点）不包含物品1：w=0,v=0,ub=0+(10-0)*6=60
对左节点继续向下考虑是否放入物品i+1；
（左节点）包含物品2：w=11(超过背包的最大承重量,该节点不可行)
（右节点）不包含物品2：w=4,v=40,ub=40+(10-4)*5=70
对右节点继续向下考虑是否加入物品i+1；
（左节点）包含物品3：w=9,v=65,ub=65+（10-9）*4=69
（右节点）不包含物品3：w=4,v=40,ub=40+(10-4)*4=64
对左节点继续向下考虑是否加入物品i+1;
(左节点)包含物品4：w=12(超过背包承重量，是不可行的不能插入该节点)
不包含物品4：w=9,v=65,ub=65(与其他节点比较，该点得到最优解)
